import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { fetchCount } from './counter/counterAPI';

const initialState = {
    value: 0,
    status: 'idle',
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.

/**
 * Hàm bên dưới được gọi là thunk và cho phép chúng tôi thực hiện logic không đồng bộ.
 * Nó có thể được gửi đi giống như một hành động thông thường: `dispatch(incrementAsync(10))`.
 * Thao tác này sẽ gọi thunk với hàm `dispatch` làm đối số đầu tiên.
 * Sau đó, mã không đồng bộ có thể được thực thi và các hành động khác có thể được gửi đi.
 * Thunks thường được sử dụng để thực hiện các yêu cầu không đồng bộ.
 */
export const incrementAsync = createAsyncThunk('counter/fetchCount', async (amount) => {
    const response = await fetchCount(amount);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
});

export const userSlice = createSlice({
    name: 'user',
    initialState: {
        user: null,
    },
    reducers: {
        // LogIn
        login: (state, action) => {
            state.user = action.payload;
        },

        // LogOut
        logout: (state) => {
            state.user = null;
        },
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
        builder
            .addCase(incrementAsync.pending, (state) => {
                state.status = 'loading';
            })
            .addCase(incrementAsync.fulfilled, (state, action) => {
                state.status = 'idle';
                state.value += action.payload;
            });
    },
});

export const { login, logout } = userSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectUser = (state) => state.user.user;

export default userSlice.reducer;
